FORMAT: 1A

# Hex

The Hex API is based on REST, it is currently in beta and so can change at any time. This API is a specification with examples from the implementation at https://hex.pm/api. Parts of the specification are optional to implement and will be marked as such.

### Related specifications

The HTTP API is only one of the specifications that makes the package manager Hex. Keep in mind that the HTTP API is not required to be implemented for clients to be able to consume the repository. Repositories that doesn't allow public users to publish packages can have any mechanism for publishing to their repository. For publicly visible repositories, it is recommended to also implement the endpoints for browsing packages (/packages/\*).

Below is a list of related specifications:

  * [Endpoints](https://github.com/hexpm/specifications/blob/master/endpoints.md)
  * [ETS registry format](https://github.com/hexpm/specifications/blob/master/registry-v1.md) (Going to be deprecated)
  * [New registry format](https://github.com/hexpm/specifications/blob/master/registry-v2.md)
  * [Tarball format](https://github.com/hexpm/specifications/blob/master/package_tarball.md)
  * [Package metadata](https://github.com/hexpm/specifications/blob/master/package_metadata.md)

### Media types

Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the Accept header when you make a request.

The API supports two media types; JSON and Erlang. Hex media types look like this:

    application/vnd.hex[+format]

The following are the accepted media types:

  * application/json
  * application/vnd.hex+json
  * application/vnd.hex+erlang

The erlang media type is a safe subset of erlang terms serialized with [`erlang:term_to_binary/1`](http://www.erlang.org/doc/man/erlang.html#term_to_binary-1). The only allowed terms are maps, lists, tuples, numbers, binaries and booleans. Atoms are strictly not allowed.

### Rate limiting

The rate limiting allows you to make 100 requests per minute per IP. The limits are likely to change in the future and authenticated requests will be able to make more requests. Additionally, in the future, conditional requests that return `304 Not Modified` will not count against the limits.

The returned HTTP headers will tell you about your current rate limit status:

Header                  | Description
:---------------------- | :----------
`X-RateLimit-Limit`     | The maximum number of requests that the consumer is permitted to make per minute.
`X-RateLimit-Remaining` | The remaining number of requests the consumer is allowed to make until reset.
`X-RateLimit-Reset`     | The time at which the rate limit window reset in UNIX epoch.

### User Agent required

All API requests must include a valid `User-Agent` header. An invalid or missing header will return a `400 Bad Request` response. The name of the client and version should be included, an example of the official Mix client is `User-Agent: Hex/0.12.1 (Elixir/1.3.0) (OTP/19.0)`.

### Pagination

Requests on collection resources return paginated results. Requests that return multiple results may return up to 100 items. You can specify further pages with the `?page` parameter.

    $ curl https://hex.pm/api/packages?page=2

Page numbering start from 1 and will by default return the first page.

### Conditional requests

Most responses return an `ETag` header. Many responses will also return a `Last-Modified` header, the notable exception being responses on collection resources. You can use the values provided in these headers to send conditional requests with `If-None-Match` or `If-Modified-Since`. If the resource has not changed, a `304 Not Modified` response will be returned.

### Authentication

There are two way ways to authenticate requests in the Hex API: Basic Authentication with a username and password, or with an API token. Failed authentication attempts will return `401 Unauthorized`. Resources accessed without proper authentication will return a `403 Forbidden` except for some resources that return `404 Not Found` to prevent leaking sensitive data.

Any endpoint implementation for Hex should support SSL termination by default, to prevent user credentials from being intercepted by third parties.

##### Basic Authentication

    $ curl -u "username" https://hex.pm/api

Basic authentication is only allowed on some resources, specifically ones used to generate API tokens. This is because the basic authentication is computationally expensive and less secure than using API tokens.

##### API Token

    $ curl -H "Authorization: token" https://hex.pm/api

### Client errors

  1. Sending invalid JSON or Erlang will result in `400 Bad Request`.

        HTTP/1.1 400 Bad Request

        {
          "status": 400,
          "message": "bad request"
        }

  2. Failed authentication attempts will result in `401 Unauthorized`.

        HTTP/1.1 401 Unauthorized

        {
          "status": 401,
          "message": "failed to authorize"
        }

  3. Making a request to a missing resource will result in `404 Not Found`.

        HTTP/1.1 404 Not Found

        {
          "status": 404,
          "message": "not found"
        }

  4. Validation errors or invalid parameters will return `422 Unprocessable Entity`.

        HTTP/1.1 422 Unprocessable Entity

        {
          "status": 422,
          "message": "validation failed",
          "errors": {
            "email": "has invalid format"
          }
        }

### Package search

By default search will do a wildcard match on the package name and full text search on the package description. If the search string is `nerves`, package names matching `*nerves*` will be found and packages having `nerves` or a stemmed version of the string in the description.

Search can also be performed on specific fields, for example: `name:nerves* extra:package,name,postgresql`.

The search fields are:

  * `name` - Package name, can include the wildcard operator `*` at the end or start of the string.
  * `description` - Full text search package description.
  * `extra` - Comma-separated search on `extra` map in metadata. `extra:type,nerves` will match `{"type": "nerves"}`.

# Group Users

Authenticated requests require a User account. A User is required to publish packages but not to consume packages from the package manager.

## Users collection [/users]

### Create a User [POST]

A successful user creation will send a confirmation email to the given email address. The email will contain a link to follow in order to confirm the email and activate the account. The account will be usable once activated.

A user can be recreated for a given `username` and `email` if it has not been activated yet.

+ Request (application/json)

    + Attributes
        + `username` (string, required) - Only allows any alphanumeric (`[A-Za-z0-9]`) and the following characters: `_-.`. Case insensitive.
        + `password` (string, required) - Should simply be a printable UTF-8 string
        + `email` (string, required) - Should be a valid email address

    + Header

            Accept: application/json

    + Body

            {
              "username": "ericmj",
              "password": "hunter42",
              "email": "ericmj@mail.com"
            }

+ Response 201 (application/json)

    + Attributes (User)

    + Header

            Location: https://hex.pm/api/users/ericmj

    + Body

            {
              "username": "ericmj",
              "email": "ericmj@mail.com"
              "inserted_at": "2015-04-05T01:21:49Z",
              "updated_at": "2015-04-05T01:21:49Z",
              "url": "https://hex.pm/api/users/ericmj"
            }

## User [/user/{username_or_email}]

+ Parameters
    + username_or_email: ericmj (string)
        Can be either a username or the email address associated with a User

+ Attributes
    + `username` (string, required) - Only allows any alphanumeric (`[A-Za-z0-9]`) and the following characters: `_-.`. Case insensitive.
    + `email` (string, required) - Should be a valid email address
    + `inserted_at` (string, required) - ISO8601-encoded timestamp
    + `updated_at` (string, required) - ISO8601-encoded timestamp
    + `url` (string, required)

### Fetch a User [GET]

+ Request (application/json)

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)

    + Attributes (User)

    + Body

            {
              "username": "ericmj",
              "email": "ericmj@mail.com"
              "inserted_at": "2015-04-05T01:21:49Z",
              "updated_at": "2015-04-05T01:21:49Z",
              "url": "https://hex.pm/api/users/ericmj"
            }

## User reset [/user/{username_or_email}/reset]

+ Parameters
    + username_or_email: ericmj (string)
        Can be either a username or the email address associated with a User

### Reset User password [POST]

Will start the process to reset a User's password. A confirmation email will be sent to the email address associated with the account. The email will contain a link to follow and will lead to a form where a new password can be provided.

+ Request (application/json)

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 204 (application/json)

# Group Releases

Packages are essentially a (unique) name with some associated metadata. Group releases are a way to group and structure package releases which will be covered later.

## Packages Collection [/packages{?sort,search}]

This collection is paginated.

### List all Packages [GET]

+ Parameters
    + sort: downloads (enum[string], optional)
        Sorting field
        + Default: name
        + Members
            + name - Package name, descending
            + downloads - Number of package downloads, ascending
            + inserted_at - Package insertion time, ascending
            + updated_at - Package last update time, descending
    + search: phoenix (string, optional)
        Search string, see "Package search" above

+ Request

    + Header

            Accept: application/json

+ Response 200 (application/json)

    + Attributes (array[Package])

    + Body

            [{
              "name": "plug",
              "url": "https://hex.pm/api/packages/plug",
              "meta": {
                "links": {"GitHub": "https://github.com/elixir-lang/plug"},
                "licenses": ["Apache 2"],
                "description": "A specification and conveniences for composable modules in between web applications"
              },
              "downloads": {
                "all": 43,
                "week": 14,
                "day": 2
              },
              "inserted_at": "2015-03-24T20:31:35Z",
              "updated_at": "2015-04-02T04:55:41Z"
            }]

## Package [/packages/{name}]

+ Parameters
    + name: plug (string) - Package name

+ Attributes
    + `name` (string, required) - Package name
    + `namespace` (string, optional) - Namespace the package belongs to, if unset the package belongs to the global namespace
    + `private` (boolean, optional) - The package is private and needs authentication to be visible and fetched
    + `meta` (object, required) - Package metadata
        + `contributors` (array[string], required) - Package maintainers (migrating to rename attribute to `maintainers` both values are valid)
        + `links` (object, required) - Links related to the package, key is the link name, value is the URL
        + `licenses` (array[string], required) - Licenses that apply to the package
        + `description` (string, required) - Package description, recommended to be a single paragraph
    + `downloads` (object, required) - Number of package downloads
        + `all` (number, required) - All time
        + `week` (number, required) - Last seven days
        + `day` (number, required) - Yesterday
    + `releases` (array, required)
        + `release` (object, required) - See Release for details
            + `name` (string, required)
            + `inserted_at` (string, required)
            + `updated_at` (string, required)
            + `url` (string, required)
    + `inserted_at` (string, required) - ISO8601-encoded timestamp
    + `updated_at` (string, required) - ISO8601-encoded timestamp
    + `url` (string, required)

### Fetch a Package [GET]

+ Request

    + Header

            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Package)

    + Body

            {
              "name": "plug",
              "url": "https://hex.pm/api/packages/plug",
              "meta": {
                "links": {"GitHub": "https://github.com/elixir-lang/plug"},
                "licenses": ["Apache 2"],
                "description": "A specification and conveniences for composable modules in between web applications"
              },
              "downloads": {
                "all": 43,
                "week": 14,
                "day": 2
              },
              "releases": [{
                "version": "0.4.1",
                "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
                "inserted_at": "2014-04-23T18:58:54Z",
                "updated_at": "2015-04-26T15:26:23Z"
              }],
              "inserted_at": "2015-03-24T20:31:35Z",
              "updated_at": "2015-04-02T04:55:41Z"
            }

## Group Package Release

A release has a (unique) version and belongs to a package. Associated with the release are it's content; the source code and related files required to build and use it as a library.

After a release has been published there is a one hour window where it can be modified (republished) or reverted. After the hour it is immutable and cannot be altered by users, note that the administrators reserve the right to remove or modify releases in any way, either because it breaks the Code of Conduct or because any of the specifications changed.

## Release [/packages/{name}/releases/{version}]

+ Parameters
    + name: plug (string)
        Package name
    + version: 0.4.1 (string)
        Release version, should be a [Semantic Version](http://semver.org/)

+ Attributes
    + `version` (string, required) - Release version, should be a [Semantic Version](http://semver.org/)
    + `has_docs` (boolean, required) - `true` if this release has associated documentation
    + `meta` (object, required) - Release metadata
        + `build_tools` (array[string], required) - Names of build tools that can build the package
    + `dependencies` (array, required) - Releases dependencies
        + `dependency` (object, required)
            + `name` (string, required) - Dependency's package name
            + `requirement` (string, required) - [Version requirement](http://elixir-lang.org/docs/stable/elixir/Version.html) on dependency
            + `optional` (boolean, required) - An optional dependency only has to be satisfied if a package higher up the chain also requires it
            + `app` (string, required) - OTP application name, usually the dependency name but can differ
    + `retired` (object, optional) - Retirement status, if not set the release is not retired
        + `reason` (enum[string], required) - Reason for retirement
            + Members
                + `other`
                + `invalid`
                + `security`
                + `deprecated`
                + `renamed`
        + `message` (string, optional) - An additional, clarifying message for the retirement
    + `downloads` (number, required) - Number of downloads of the release
    + `inserted_at` (string, required) - ISO8601-encoded timestamp
    + `updated_at` (string, required) - ISO8601-encoded timestamp
    + `url` (string, required)

### Publish a Release [POST]

Will also create a new package or update an existing one. See the package tarball specification for details about the request contents.

+ Request

    This request requires authentication.

    The body should be a package tarball following the specification linked in the introduction.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 201 (application/json)

    + Attributes (Release)

    + Body

            {
              "version": "0.4.1",
              "has_docs": false,
              "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
              "package_url": "https://hex.pm/api/packages/plug",
              "meta": {
                "build_tools": ["mix"]
              },
              "dependencies": {
                "cowboy": {
                  "requirement": "~> 1.0",
                  "optional": true,
                  "app": "cowboy"
                }
              }
              "downloads": 16,
              "inserted_at": "2014-04-23T18:58:54Z",
              "updated_at": "2014-04-23T18:58:54Z"
            }

### Fetch a Release [GET]

+ Request

    + Header

            Accept: application/json

+ Response 200 (application/json)

    + Attributes (Release)

    + Body

            {
              "package_name": "plug",
              "version": "0.4.1",
              "has_docs": true,
              "url": "https://hex.pm/api/packages/plug/releases/0.4.1",
              "package_url": "https://hex.pm/api/packages/plug",
              "meta": {
                "build_tools": ["mix"]
              },
              "dependencies": {
                "cowboy": {
                  "requirement": "~> 1.0",
                  "optional": true,
                  "app": "cowboy"
                }
              }
              "downloads": 16,
              "inserted_at": "2014-04-23T18:58:54Z",
              "updated_at": "2015-04-26T15:26:23Z"
            }

## Retiring Releases [/packages/{name}/releases/{version}/retire]

+ Parameters
    + name: plug (string)
        Package name
    + version: 0.4.1 (string)
        Release version, should be a [Semantic Version](http://semver.org/)

### Mark Release as Retired [POST]

+ Request

    Marks a release as retired.

    + Attributes
        + `reason` (enum[string], required) - Reason for retiring the release
            + Members
                + `other`
                + `invalid`
                + `security`
                + `deprecated`
                + `renamed`
        + `message` (string, optional) - An additional, clarifying message for the retirement

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

    + Body

            {
              "reason": "deprecated",
              "message": "This package has been deprecated in favor of ecto."
            }

+ Response 204

### Unmark Release as Retired [DELETE]

+ Response 204

## Group Package Documentation

Package Documentation is attached to a release. The documentation consists of HTML and related files to be served by a browser. Unlike releases documentation can be changed at any time by package owners.

Package Documentation is optional to implement.

## Package Documentation [/packages/{name}/releases/{version}/docs]

+ Parameters
    + name: plug (string)
        Package name
    + version: 0.4.1 (string)
        Release version, should be a Semantic Version

### Publish Package Documentation [POST]

NOTE: Below are implementation details of hex.pm.

The uploaded tarball will be served under https://s3.amazonaws.com/s3.hex.pm/docs/{package}-{version}.tar.gz.

The tarball contents will be served at http://hexdocs.pm/{package}/{version}. The latest upload will be served at http://hexdocs.pm/{package}.

+ Request

    This request requires authentication.

    The body should be a gzipped tarball containing files that should be served as documentation for the project. It should contain an `index.html` that will be served as the root.

    + Header

            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 201

    + Header

            Location: https://hex.pm/api/packages/plug/releases/0.4.1/docs

### Remove Package Documentation [DELETE]

+ Response 204

# Group Package Owners

Package owners are Users that can publish packages. Any owner can add or remove other package owners so be careful with whom you add.

## Package Owners Collection [/packages/{name}/owners]

+ Parameters
    + name: plug (string)
        Package name

### Fetch Package Owners [GET]

+ Request

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 204

## Package Owner [/packages/{name}/owners/{email}]

+ Parameters
    + name: plug (string)
        Package name
    + email: ericmj@mail.com (string)
        User account email, should be a valid email address belonging to an existing user

### Add a Package Owner [PUT]

+ Response 204

### Remove a Package Owner [DELETE]

+ Response 204

# Group API Keys

API Keys are used to authenticate requests (see Authentication section for more details). A key has a name used to identify it and a secret that is used for the actual authentication.

## API Keys Collection [/keys]

### List all API Keys [GET]

+ Request

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)

    + Attributes (array[API Key])

    + Body

            [{
              "name": "my_computer",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z",
              "url": "https://hex.pm/api/keys/my_computer"
            }]

### Create an API Key [POST]

+ Request

    This request requires basic authentication and is allowed to be made even if the account email has not yet been confirmed.

    + Attributes
        + `name` (string, required)

    + Header

            Accept: application/json
            Authorization: Basic ZXJpY21qOmh1bnRlcjQy

    + Body

            {"name": "my_computer"}

+ Response 201 (application/json)

    The `secret` will be sent only once. It should be stored after creating the API key. Subsequent responses to GET requests will not include the `secret`.

    + Attributes (API Key)
        + `secret` - The key secret, a 32 character hex encoded string

    + Header

            Location: https://hex.pm/api/keys/my_computer

    + Body

            {
              "name": "my_computer",
              "secret": "e2bfe5e65b9235acebe06df8027905c0",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z",
              "url": "https://hex.pm/api/keys/my_computer"
            }

## API Key [/keys/{name}]

+ Parameters
    + name: my_computer (string)
        Key name

+ Attributes
    + `name` (string, required) - Key name
    + `inserted_at` (string, required) - ISO8601-encoded timestamp
    + `updated_at` (string, required) - ISO8601-encoded timestamp
    + `url` (string, required)

### Fetch an API Key [GET]

+ Request

    This request requires authentication.

    + Header

            Accept: application/json
            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 200 (application/json)

    + Attributes (API Key)

    + Body

            {
              "name": "my_computer",
              "inserted_at": "2014-04-21T17:20:12Z",
              "updated_at": "2014-04-21T17:20:12Z",
              "url": "https://hex.pm/api/keys/my_computer"
            }

### Remove an API Key [DELETE]

+ Request

    This request requires authentication.

    + Header

            Authorization: e2bfe5e65b9235acebe06df8027905c0

+ Response 204
