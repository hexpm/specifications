%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.24.3
-module(hex_pb_versions).

-export([encode_msg/2, encode_msg/3]).
-export([encode/1]). %% epb compatibility
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([decode/2]). %% epb compatibility
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



-spec encode_msg(_,atom()) -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg(_,atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    verify_msg(Msg, MsgName, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' -> e_msg_Package(Msg, TrUserData);
      'Versions' -> e_msg_Versions(Msg, TrUserData)
    end.


%% epb compatibility
encode(_Msg) ->
    erlang:error({gpb_error,
		  epb_compat_not_possible_with_maps}).


e_msg_Package(Msg, TrUserData) ->
    e_msg_Package(Msg, <<>>, TrUserData).


e_msg_Package(#{name := F1, versions := F2,
		retired := F3} =
		  M,
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_Package_versions(TrF2, B1, TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_Package_retired(TrF3, B2, TrUserData)
	   end
	 end,
    case M of
      #{namespace := F4} ->
	  TrF4 = id(F4, TrUserData),
	  e_type_string(TrF4, <<B3/binary, 34>>);
      _ -> B3
    end.

e_msg_Versions(Msg, TrUserData) ->
    e_msg_Versions(Msg, <<>>, TrUserData).


e_msg_Versions(#{packages := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_Versions_packages(TrF1, Bin, TrUserData)
      end
    end.

e_field_Package_versions([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_Package_versions(Rest, Bin3, TrUserData);
e_field_Package_versions([], Bin, _TrUserData) -> Bin.

e_field_Package_retired(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_Package_retired(Elems, <<>>,
				     TrUserData),
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_Package_retired([], Bin, _TrUserData) -> Bin.

e_pfield_Package_retired([Value | Rest], Bin,
			TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    e_pfield_Package_retired(Rest, Bin2, TrUserData);
e_pfield_Package_retired([], Bin, _TrUserData) -> Bin.

e_mfield_Versions_packages(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Package(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Versions_packages([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Versions_packages(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_Versions_packages(Rest, Bin3, TrUserData);
e_field_Versions_packages([], Bin, _TrUserData) -> Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' -> d_msg_Package(Bin, TrUserData);
      'Versions' -> d_msg_Versions(Bin, TrUserData)
    end.


%% epb compatibility
decode(MsgName, Bin)
    when is_atom(MsgName), is_binary(Bin) ->
    erlang:error({gpb_error,
		  epb_compat_not_possible_with_maps}).



d_msg_Package(Bin, TrUserData) ->
    dfp_read_field_def_Package(Bin, 0, 0,
			       id('$undef', TrUserData), id([], TrUserData),
			       id([], TrUserData), id('$undef', TrUserData),
			       TrUserData).

dfp_read_field_def_Package(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, TrUserData) ->
    d_field_Package_name(Rest, Z1, Z2, F1, F2, F3, F4,
			 TrUserData);
dfp_read_field_def_Package(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, TrUserData) ->
    d_field_Package_versions(Rest, Z1, Z2, F1, F2, F3, F4,
			     TrUserData);
dfp_read_field_def_Package(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, TrUserData) ->
    d_field_Package_retired(Rest, Z1, Z2, F1, F2, F3, F4,
			   TrUserData);
dfp_read_field_def_Package(<<34, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, F4, TrUserData) ->
    d_field_Package_namespace(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_Package(<<>>, 0, 0, F1, F2, F3, F4,
			   TrUserData) ->
    S1 = #{name => F1,
	   versions => lists_reverse(F2, TrUserData),
	   retired => lists_reverse(F3, TrUserData)},
    if F4 == '$undef' -> S1;
       true -> S1#{namespace => F4}
    end;
dfp_read_field_def_Package(Other, Z1, Z2, F1, F2, F3,
			   F4, TrUserData) ->
    dg_read_field_def_Package(Other, Z1, Z2, F1, F2, F3, F4,
			      TrUserData).

dg_read_field_def_Package(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Package(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
dg_read_field_def_Package(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Package_name(Rest, 0, 0, F1, F2, F3, F4,
			       TrUserData);
      18 ->
	  d_field_Package_versions(Rest, 0, 0, F1, F2, F3, F4,
				   TrUserData);
      26 ->
	  d_field_Package_retired(Rest, 0, 0, F1, F2, F3, F4,
				 TrUserData);
      34 ->
	  d_field_Package_namespace(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Package(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
	    1 ->
		skip_64_Package(Rest, 0, 0, F1, F2, F3, F4, TrUserData);
	    2 ->
		skip_length_delimited_Package(Rest, 0, 0, F1, F2, F3,
					      F4, TrUserData);
	    5 ->
		skip_32_Package(Rest, 0, 0, F1, F2, F3, F4, TrUserData)
	  end
    end;
dg_read_field_def_Package(<<>>, 0, 0, F1, F2, F3, F4,
			  TrUserData) ->
    S1 = #{name => F1,
	   versions => lists_reverse(F2, TrUserData),
	   retired => lists_reverse(F3, TrUserData)},
    if F4 == '$undef' -> S1;
       true -> S1#{namespace => F4}
    end.

d_field_Package_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Package_name(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, TrUserData);
d_field_Package_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, NewFValue, F2,
			       F3, F4, TrUserData).


d_field_Package_versions(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Package_versions(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, TrUserData);
d_field_Package_versions(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, F1,
			       cons(NewFValue, F2, TrUserData), F3, F4,
			       TrUserData).


d_field_Package_retired(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Package_retired(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, TrUserData);
d_field_Package_retired(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_Package_retired(PackedBytes, 0,
					   0, F3),
    dfp_read_field_def_Package(Rest2, 0, 0, F1, F2, NewSeq,
			       F4, TrUserData).


d_packed_field_Package_retired(<<1:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_Package_retired(Rest, N + 7,
				  X bsl N + Acc, AccSeq);
d_packed_field_Package_retired(<<0:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    d_packed_field_Package_retired(Rest, 0, 0,
				  [NewFValue | AccSeq]);
d_packed_field_Package_retired(<<>>, 0, 0, AccSeq) ->
    AccSeq.


d_field_Package_namespace(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_Package_namespace(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_Package_namespace(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, F1, F2, F3,
			       NewFValue, TrUserData).


skip_varint_Package(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, TrUserData) ->
    skip_varint_Package(Rest, Z1, Z2, F1, F2, F3, F4,
			TrUserData);
skip_varint_Package(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData).


skip_length_delimited_Package(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Package(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
skip_length_delimited_Package(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Package(Rest2, 0, 0, F1, F2, F3, F4,
			       TrUserData).


skip_32_Package(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, TrUserData) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData).


skip_64_Package(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, F4, TrUserData) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData).


d_msg_Versions(Bin, TrUserData) ->
    dfp_read_field_def_Versions(Bin, 0, 0,
				id([], TrUserData), TrUserData).

dfp_read_field_def_Versions(<<10, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_Versions_packages(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Versions(<<>>, 0, 0, F1,
			    TrUserData) ->
    #{packages => lists_reverse(F1, TrUserData)};
dfp_read_field_def_Versions(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_Versions(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_Versions(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Versions(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_Versions(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Versions_packages(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Versions(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Versions(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Versions(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_Versions(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Versions(<<>>, 0, 0, F1,
			   TrUserData) ->
    #{packages => lists_reverse(F1, TrUserData)}.

d_field_Versions_packages(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData)
    when N < 57 ->
    d_field_Versions_packages(Rest, N + 7, X bsl N + Acc,
			      F1, TrUserData);
d_field_Versions_packages(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Package(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_Versions(Rest2, 0, 0,
				cons(NewFValue, F1, TrUserData), TrUserData).


skip_varint_Versions(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_Versions(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Versions(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_Versions(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_Versions(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Versions(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_Versions(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Versions(Rest2, 0, 0, F1,
				TrUserData).


skip_32_Versions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_Versions(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_Versions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_Versions(Rest, Z1, Z2, F1,
				TrUserData).






merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' -> merge_msg_Package(Prev, New, TrUserData);
      'Versions' -> merge_msg_Versions(Prev, New, TrUserData)
    end.

merge_msg_Package(#{name := PFname,
		    versions := PFversions, retired := PFretired} =
		      PMsg,
		  #{name := NFname, versions := NFversions,
		    retired := NFretired} =
		      NMsg,
		  TrUserData) ->
    S1 = #{name =>
	       if NFname =:= undefined -> PFname;
		  true -> NFname
	       end,
	   versions =>
	       'erlang_++'(PFversions, NFversions, TrUserData),
	   retired => 'erlang_++'(PFretired, NFretired, TrUserData)},
    case {PMsg, NMsg} of
      {_, #{namespace := NFnamespace}} ->
	  S1#{namespace => NFnamespace};
      {#{namespace := PFnamespace}, _} ->
	  S1#{namespace => PFnamespace};
      _ -> S1
    end.

merge_msg_Versions(#{packages := PFpackages},
		   #{packages := NFpackages}, TrUserData) ->
    #{packages =>
	  'erlang_++'(PFpackages, NFpackages, TrUserData)}.



verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Package' ->
	  v_msg_Package(Msg, ['Package'], TrUserData);
      'Versions' ->
	  v_msg_Versions(Msg, ['Versions'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Package/3}).
v_msg_Package(#{name := F1, versions := F2,
		retired := F3} =
		  M,
	      Path, _) ->
    v_type_string(F1, [name | Path]),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [versions | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    if is_list(F3) ->
	   _ = [v_type_int32(Elem, [retired | Path]) || Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F3, Path)
    end,
    case M of
      #{namespace := F4} ->
	  v_type_string(F4, [namespace | Path]);
      _ -> ok
    end,
    ok;
v_msg_Package(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [name, versions, retired] -- maps:keys(M), 'Package'},
		  M, Path);
v_msg_Package(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Package'}, X, Path).

-dialyzer({nowarn_function,v_msg_Versions/3}).
v_msg_Versions(#{packages := F1}, Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Package(Elem, [packages | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Package'}}, F1,
			 Path)
    end,
    ok;
v_msg_Versions(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [packages] -- maps:keys(M), 'Versions'},
		  M, Path);
v_msg_Versions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Versions'}, X, Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'Package'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => versions, fnum => 2, rnum => 3,
	 type => string, occurrence => repeated, opts => []},
       #{name => retired, fnum => 3, rnum => 4, type => int32,
	 occurrence => repeated, opts => [packed]},
       #{name => namespace, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'Versions'},
      [#{name => packages, fnum => 1, rnum => 2,
	 type => {msg, 'Package'}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() -> ['Package', 'Versions'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Package') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => versions, fnum => 2, rnum => 3,
       type => string, occurrence => repeated, opts => []},
     #{name => retired, fnum => 3, rnum => 4, type => int32,
       occurrence => repeated, opts => [packed]},
     #{name => namespace, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []}];
find_msg_def('Versions') ->
    [#{name => packages, fnum => 1, rnum => 2,
       type => {msg, 'Package'}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.24.3".

gpb_version_as_list() ->
    [3,24,3].
